buildscript {
  dependencies {
    classpath deps.build.gradlePlugins.android
    classpath deps.build.gradlePlugins.psync
    classpath deps.build.gradlePlugins.versions
  }
}

apply plugin: 'com.android.application'
apply plugin: 'com.flipboard.psync'
apply plugin: 'com.github.ben-manes.versions' // ./gradlew dependencyUpdates -Drevision=release

android {
  compileSdkVersion deps.build.compileSdkVersion
  buildToolsVersion deps.build.buildToolsVersion

  defaultConfig {
    applicationId "io.sweers.placeholder"
    minSdkVersion deps.build.minSdkVersion
    targetSdkVersion deps.build.targetSdkVersion
    versionCode deps.build.gitCommitCount
    versionName deps.build.gitTag
    multiDexEnabled true
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true

    buildConfigField 'String', 'GIT_SHA', "\"${deps.build.gitSha}\""
    buildConfigField 'long', 'GIT_TIMESTAMP', "${deps.build.gitTimestamp}"
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
  signingConfigs {
    release {
      storeFile file("placeholder")
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }
  packagingOptions {
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      versionNameSuffix "-dev"
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }
  dexOptions {
    javaMaxHeapSize "4g"
    preDexLibraries = !deps.build.ci
  }
  applicationVariants.all { variant ->
    // Delete unaligned APKs and manifest junk after
    def assembleTask = "assemble${variant.name.capitalize()}"
    tasks[assembleTask].doLast {
      //            cleanOutputDir(file("build/outputs/apk/"))

      // Enable by adding "-P notify" to end of your ./gradlew command
      if (project.hasProperty("notify")) {
        "terminal-notifier -message '${assembleTask}-->DONE' -sound 'Ping'".execute()
      }
    }
  }
  lintOptions {
    abortOnError true
    check 'NewApi', 'InlinedApi'
    fatal 'NewApi', 'InlinedApi'
    enable 'UnusedResources'
    checkReleaseBuilds true
    textReport deps.build.ci
    textOutput 'stdout'
    htmlReport !deps.build.ci
    xmlReport !deps.build.ci
  }
}

def supportLibraries = configurations.create("supportCompile")
configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group == 'com.android.support' && details.requested.name != 'multidex') {
      // We want to force all support libraries to use the same version, even if they're transitive.
      details.useVersion deps.versions.support
    }
    if (details.requested.group == 'com.google.android.gms') {
      // We want to force all play services libraries to use the same version, even if they're transitive.
      details.useVersion deps.versions.playServices
    }
  }
}

// My standard tech stack
dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  annotationProcessor deps.apt.butterKnife
  compile deps.misc.glide
  compile deps.misc.glideOkhttp
  compile deps.misc.okio
  compile deps.misc.timber
  compile deps.okhttp.core
  compile deps.rx.android
  compile deps.rx.binding
  compile deps.rx.java
  compile deps.rx.lifecycle
  supportCompile deps.support.annotations
  supportCompile deps.support.appCompat
  supportCompile deps.support.v4

  compile supportLibraries
  testCompile supportLibraries
  androidTestCompile supportLibraries

  testCompile project(':testing-utils')
  androidTestCompile project(':testing-utils')

  debugCompile deps.debug.leakCanary
  releaseCompile deps.misc.leakCanaryNoop
}

// Here so the versions plugin can work, REMOVE THIS IN PROJECT
applyDependencyMap("deps", deps)
private void applyDependencyMap(String name, Map map) {
  if (name == "versions" || name == "build") {
    // These don't go in deps
    return
  }
  map.each { k, v ->
    if (v instanceof Map) {
      applyDependencyMap(k, v)
      return
    }
    switch (name) {
      case 'apt':
        dependencies.add('annotationProcessor', v)
        return
      case 'debug':
        dependencies.add('debugCompile', v)
        return
      case 'test':
        dependencies.add('testCompile', v)
        dependencies.add('androidTestCompile', v)
        return
      case 'unitOnly':
        dependencies.add('testCompile', v)
        return
      case 'espresso':
        dependencies.add('androidTestCompile', v)
        return
      case 'support':
        if (k == 'runner' || k == 'rules') {
          dependencies.add('androidTestCompile', v)
        } else if (k != 'multidex') {
          dependencies.add('supportCompile', v)
        } else {
          dependencies.add("compile", v)
        }
        return
      default:
        dependencies.add("compile", v)
    }
  }
}
